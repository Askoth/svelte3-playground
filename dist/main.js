(function (internal) {
  'use strict';

  /* src/foo.html generated by Svelte v3.12.1 */

  function create_fragment(ctx) {
  	var t;

  	return {
  		c() {
  			t = internal.text("this is foo");
  		},

  		m(target, anchor) {
  			internal.insert(target, t, anchor);
  		},

  		p: internal.noop,
  		i: internal.noop,
  		o: internal.noop,

  		d(detaching) {
  			if (detaching) {
  				internal.detach(t);
  			}
  		}
  	};
  }

  class Foo extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		internal.init(this, options, null, create_fragment, internal.safe_not_equal, []);
  	}
  }

  /* src/bar.html generated by Svelte v3.12.1 */

  function create_fragment$1(ctx) {
  	var t0, t1, t2, button, dispose;

  	return {
  		c() {
  			t0 = internal.text("this is bar ");
  			t1 = internal.text(ctx.check);
  			t2 = internal.space();
  			button = internal.element("button");
  			button.textContent = "click me!";
  			dispose = internal.listen(button, "click", click_handler);
  		},

  		m(target, anchor) {
  			internal.insert(target, t0, anchor);
  			internal.insert(target, t1, anchor);
  			internal.insert(target, t2, anchor);
  			internal.insert(target, button, anchor);
  		},

  		p(changed, ctx) {
  			if (changed.check) {
  				internal.set_data(t1, ctx.check);
  			}
  		},

  		i: internal.noop,
  		o: internal.noop,

  		d(detaching) {
  			if (detaching) {
  				internal.detach(t0);
  				internal.detach(t1);
  				internal.detach(t2);
  				internal.detach(button);
  			}

  			dispose();
  		}
  	};
  }

  const click_handler = () => console.log('test');

  function instance($$self, $$props, $$invalidate) {
  	let check = "not clicked";

  	return { check };
  }

  class Bar extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		internal.init(this, options, instance, create_fragment$1, internal.safe_not_equal, []);
  	}
  }

  /* src/main.html generated by Svelte v3.12.1 */

  function create_fragment$2(ctx) {
  	var t0, t1, t2, switch_instance_anchor, current;

  	var switch_value = ctx.currentSelection;

  	function switch_props(ctx) {
  		return {};
  	}

  	if (switch_value) {
  		var switch_instance = new switch_value(switch_props(ctx));
  	}

  	return {
  		c() {
  			t0 = internal.text("hello world ");
  			t1 = internal.text(ctx.test);
  			t2 = internal.space();
  			if (switch_instance) switch_instance.$$.fragment.c();
  			switch_instance_anchor = internal.empty();
  		},

  		m(target, anchor) {
  			internal.insert(target, t0, anchor);
  			internal.insert(target, t1, anchor);
  			internal.insert(target, t2, anchor);

  			if (switch_instance) {
  				internal.mount_component(switch_instance, target, anchor);
  			}

  			internal.insert(target, switch_instance_anchor, anchor);
  			current = true;
  		},

  		p(changed, ctx) {
  			if (!current || changed.test) {
  				internal.set_data(t1, ctx.test);
  			}

  			if (switch_value !== (switch_value = ctx.currentSelection)) {
  				if (switch_instance) {
  					internal.group_outros();
  					const old_component = switch_instance;
  					internal.transition_out(old_component.$$.fragment, 1, 0, () => {
  						internal.destroy_component(old_component, 1);
  					});
  					internal.check_outros();
  				}

  				if (switch_value) {
  					switch_instance = new switch_value(switch_props(ctx));

  					switch_instance.$$.fragment.c();
  					internal.transition_in(switch_instance.$$.fragment, 1);
  					internal.mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
  				} else {
  					switch_instance = null;
  				}
  			}
  		},

  		i(local) {
  			if (current) return;
  			if (switch_instance) internal.transition_in(switch_instance.$$.fragment, local);

  			current = true;
  		},

  		o(local) {
  			if (switch_instance) internal.transition_out(switch_instance.$$.fragment, local);
  			current = false;
  		},

  		d(detaching) {
  			if (detaching) {
  				internal.detach(t0);
  				internal.detach(t1);
  				internal.detach(t2);
  				internal.detach(switch_instance_anchor);
  			}

  			if (switch_instance) internal.destroy_component(switch_instance, detaching);
  		}
  	};
  }

  function instance$1($$self, $$props, $$invalidate) {
  	

    let { test, path } = $$props;

    let currentSelection;

    switch (path) {
      case "/bar":
        $$invalidate('currentSelection', currentSelection = Bar);
        break;
      default:
        $$invalidate('currentSelection', currentSelection = Foo);
        break;
    }

  	$$self.$set = $$props => {
  		if ('test' in $$props) $$invalidate('test', test = $$props.test);
  		if ('path' in $$props) $$invalidate('path', path = $$props.path);
  	};

  	return { test, path, currentSelection };
  }

  class Main extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		internal.init(this, options, instance$1, create_fragment$2, internal.safe_not_equal, ["test", "path"]);
  	}
  }

  const app = new Main({
    target: document.querySelector("#root"),
    hydrate: true
  });

}(internal));
